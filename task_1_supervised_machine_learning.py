# -*- coding: utf-8 -*-
"""TASK 1 Supervised Machine Learning

Automatically generated by Colaboratory.

## **Linear Regression with Python Scikit Learn**
In this section we will see how the Python Scikit-Learn library for machine learning can be used to implement regression functions. We will start with simple linear regression involving two variables.

### **Simple Linear Regression**
In this regression task we will predict the percentage of marks that a student is expected to score based upon the number of hours they studied. This is a simple linear regression task as it involves just two variables.

### Author: Rihen Vora

**Task Solution**
"""

# Importing all libraries required in this notebook
import pandas as pd
import numpy as np  
import seaborn as sns
import matplotlib.pyplot as plt  

from sklearn.model_selection import train_test_split 
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression, LogisticRegression

# Reading data from remote link
url = "http://bit.ly/w-data"
data = pd.read_csv(url)
print("Data imported successfully")

data.head(10)

"""Let's plot our data points on 2-D graph to eyeball our dataset and see if we can manually find any relationship between the data. We can create the plot with the following script:"""

# Plotting the distribution of scores
data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()
# Set up the matplotlib figure
f, ax = plt.subplots(figsize=(7, 5), sharex=False)
#ax.set_title('Hours vs Percentage') 
ax.set(title='Hours vs Percentage',xlabel='Hours Studied', ylabel='Percentage Score')
sns.barplot(x=data.Hours, y=data.Scores, palette="rocket", ax=ax)

sns.pairplot(data)

"""### **Splitting the data**

Spitting Data Into Input(Hours) and Output(Score)
"""

X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values  

#print(X)
#print(y)

"""Now that we have our attributes and labels, the next step is to split this data into training and test sets. We'll do this by using Scikit-Learn's built-in train_test_split() method:"""

X_train, X_test, y_train, y_test = train_test_split(X, y, 
                            test_size=0.25, random_state=0)

"""### **Training the Algorithm**
We have split our data into training and testing sets, and now is finally the time to train our algorithm.
"""

regressor = LinearRegression()  
regressor.fit(X_train, y_train)

logisticRegr = LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=500,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
logisticRegr.fit(X_train, y_train)

# Plotting the regression line
line = regressor.coef_*X+regressor.intercept_

# Plotting for the test data
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

"""### **Making Predictions**
Now that we have trained our algorithm, it's time to make some predictions.
"""

#print(X_test) # Testing data - In Hours
y_pred = regressor.predict(X_test) # Predicting the scores
df1 = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df1

y_pred1 = logisticRegr.predict(X_test) # Predicting the scores
# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred1})  
df

# You can also test with your own data
hours = np.array(9.5).reshape(1,-1)
#print(type(hours))
input = regressor.predict(hours)
input1 = logisticRegr.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = For Linear Regression {} Logistic Regression {}".format(input[0],input1[0]))

"""### **Evaluating the model**

It is particularly important to compare how well different algorithms perform on a particular dataset. For simplicity here, we have chosen the mean square error. There are many such metrics. Such as R2 Score, Mean Squared Error, Root Mean Squared Error,  etc.
"""

from sklearn import metrics  
print('Mean Absolute Error For Liner Regression:', 
      metrics.mean_absolute_error(y_test, y_pred)) 
print('Mean Absolute Error Logistic Regression:', 
      metrics.mean_absolute_error(y_test, y_pred1))
